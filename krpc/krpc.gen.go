// Package krpc provides methods to invoke procedures in the KRPC service.
//
// From service docs: main kRPC service, used by clients to interact with basic
// server functionality.
package krpc

import (
	krpcgo "github.com/atburke/krpc-go"
	encode "github.com/atburke/krpc-go/lib/encode"
	service "github.com/atburke/krpc-go/lib/service"
	types "github.com/atburke/krpc-go/types"
	tracerr "github.com/ztrue/tracerr"
)

// Code generated by gen_services.go. DO NOT EDIT.

// ErrArgument - a method was invoked where at least one of the passed arguments
// does not meet the parameter specification of the method.
type ErrArgument struct {
	msg string
}

// NewErrArgument creates a new ErrArgument.
func NewErrArgument(msg string) *ErrArgument {
	return &ErrArgument{msg: msg}
}

// Error returns a human-readable error.
func (err ErrArgument) Error() string {
	return err.msg
}

// ErrArgumentNull - a null reference was passed to a method that does not
// accept it as a valid argument.
type ErrArgumentNull struct {
	msg string
}

// NewErrArgumentNull creates a new ErrArgumentNull.
func NewErrArgumentNull(msg string) *ErrArgumentNull {
	return &ErrArgumentNull{msg: msg}
}

// Error returns a human-readable error.
func (err ErrArgumentNull) Error() string {
	return err.msg
}

// ErrArgumentOutOfRange - the value of an argument is outside the allowable
// range of values as defined by the invoked method.
type ErrArgumentOutOfRange struct {
	msg string
}

// NewErrArgumentOutOfRange creates a new ErrArgumentOutOfRange.
func NewErrArgumentOutOfRange(msg string) *ErrArgumentOutOfRange {
	return &ErrArgumentOutOfRange{msg: msg}
}

// Error returns a human-readable error.
func (err ErrArgumentOutOfRange) Error() string {
	return err.msg
}

// ErrInvalidOperation - a method call was made to a method that is invalid
// given the current state of the object.
type ErrInvalidOperation struct {
	msg string
}

// NewErrInvalidOperation creates a new ErrInvalidOperation.
func NewErrInvalidOperation(msg string) *ErrInvalidOperation {
	return &ErrInvalidOperation{msg: msg}
}

// Error returns a human-readable error.
func (err ErrInvalidOperation) Error() string {
	return err.msg
}

// GameScene - the game scene. See <see cref="M:KRPC.CurrentGameScene" />.
type GameScene int32

const (
	// The game scene showing the Kerbal Space Center buildings.
	GameScene_SpaceCenter GameScene = 0
	// The game scene showing a vessel in flight (or on the launchpad/runway).
	GameScene_Flight GameScene = 1
	// The tracking station.
	GameScene_TrackingStation GameScene = 2
	// The Vehicle Assembly Building.
	GameScene_EditorVAB GameScene = 3
	// The Space Plane Hangar.
	GameScene_EditorSPH GameScene = 4
)

func (v GameScene) Value() int32 {
	return int32(v)
}
func (v *GameScene) SetValue(val int32) {
	*v = GameScene(val)
}

// Expression - a server side expression.
type Expression struct {
	service.BaseClass
}

// NewExpression creates a new Expression.
func NewExpression(id uint64, client *krpcgo.KRPCClient) *Expression {
	c := &Expression{BaseClass: service.BaseClass{Client: client}}
	c.SetID_internal(id)
	return c
}

// Type - a server side expression.
type Type struct {
	service.BaseClass
}

// NewType creates a new Type.
func NewType(id uint64, client *krpcgo.KRPCClient) *Type {
	c := &Type{BaseClass: service.BaseClass{Client: client}}
	c.SetID_internal(id)
	return c
}

// KRPC - main kRPC service, used by clients to interact with basic server
// functionality.
type KRPC struct {
	Client *krpcgo.KRPCClient
}

// New creates a new KRPC.
func New(client *krpcgo.KRPCClient) *KRPC {
	return &KRPC{Client: client}
}

// GetClientID - returns the identifier for the current client.
//
// Allowed game scenes: any.
func (s *KRPC) GetClientID() ([]byte, error) {
	var err error
	var vv []byte
	request := &types.ProcedureCall{
		Procedure: "GetClientID",
		Service:   "KRPC",
	}
	result, err := s.Client.Call(request)
	if err != nil {
		return vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return vv, tracerr.Wrap(err)
	}
	return vv, nil
}

// GetClientIDStream - returns the identifier for the current client.
//
// Allowed game scenes: any.
func (s *KRPC) GetClientIDStream() (*krpcgo.Stream[[]byte], error) {
	var err error
	request := &types.ProcedureCall{
		Procedure: "GetClientID",
		Service:   "KRPC",
	}
	krpc := New(s.Client)
	st, err := krpc.AddStream(request, true)
	if err != nil {
		return nil, tracerr.Wrap(err)
	}
	rawStream := s.Client.GetStream(st.Id)
	stream := krpcgo.MapStream(rawStream, func(b []byte) []byte {
		var value []byte
		encode.Unmarshal(b, &value)
		return value
	})
	stream.AddCloser(func() error {
		return tracerr.Wrap(krpc.RemoveStream(st.Id))
	})
	return stream, nil
}

// GetClientName - returns the name of the current client. This is an empty
// string if the client has no name.
//
// Allowed game scenes: any.
func (s *KRPC) GetClientName() (string, error) {
	var err error
	var vv string
	request := &types.ProcedureCall{
		Procedure: "GetClientName",
		Service:   "KRPC",
	}
	result, err := s.Client.Call(request)
	if err != nil {
		return vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return vv, tracerr.Wrap(err)
	}
	return vv, nil
}

// GetClientNameStream - returns the name of the current client. This is an
// empty string if the client has no name.
//
// Allowed game scenes: any.
func (s *KRPC) GetClientNameStream() (*krpcgo.Stream[string], error) {
	var err error
	request := &types.ProcedureCall{
		Procedure: "GetClientName",
		Service:   "KRPC",
	}
	krpc := New(s.Client)
	st, err := krpc.AddStream(request, true)
	if err != nil {
		return nil, tracerr.Wrap(err)
	}
	rawStream := s.Client.GetStream(st.Id)
	stream := krpcgo.MapStream(rawStream, func(b []byte) string {
		var value string
		encode.Unmarshal(b, &value)
		return value
	})
	stream.AddCloser(func() error {
		return tracerr.Wrap(krpc.RemoveStream(st.Id))
	})
	return stream, nil
}

// GetStatus - returns some information about the server, such as the version.
//
// Allowed game scenes: any.
func (s *KRPC) GetStatus() (*types.Status, error) {
	var err error
	var vv types.Status
	request := &types.ProcedureCall{
		Procedure: "GetStatus",
		Service:   "KRPC",
	}
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	return &vv, nil
}

// GetServices - returns information on all services, procedures, classes,
// properties etc. provided by the server. Can be used by client libraries to
// automatically create functionality such as stubs.
//
// Allowed game scenes: any.
func (s *KRPC) GetServices() (*types.Services, error) {
	var err error
	var vv types.Services
	request := &types.ProcedureCall{
		Procedure: "GetServices",
		Service:   "KRPC",
	}
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	return &vv, nil
}

// AddStream - add a streaming request and return its identifier.
//
// Allowed game scenes: any.
func (s *KRPC) AddStream(call *types.ProcedureCall, start bool) (*types.Stream, error) {
	var err error
	var argBytes []byte
	var vv types.Stream
	request := &types.ProcedureCall{
		Procedure: "AddStream",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(call)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(start)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	return &vv, nil
}

// StartStream - start a previously added streaming request.
//
// Allowed game scenes: any.
func (s *KRPC) StartStream(id uint64) error {
	var err error
	var argBytes []byte
	request := &types.ProcedureCall{
		Procedure: "StartStream",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(id)
	if err != nil {
		return tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	_, err = s.Client.Call(request)
	if err != nil {
		return tracerr.Wrap(err)
	}
	return nil
}

// SetStreamRate - set the update rate for a stream in Hz.
//
// Allowed game scenes: any.
func (s *KRPC) SetStreamRate(id uint64, rate float32) error {
	var err error
	var argBytes []byte
	request := &types.ProcedureCall{
		Procedure: "SetStreamRate",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(id)
	if err != nil {
		return tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(rate)
	if err != nil {
		return tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	_, err = s.Client.Call(request)
	if err != nil {
		return tracerr.Wrap(err)
	}
	return nil
}

// RemoveStream - remove a streaming request.
//
// Allowed game scenes: any.
func (s *KRPC) RemoveStream(id uint64) error {
	var err error
	var argBytes []byte
	request := &types.ProcedureCall{
		Procedure: "RemoveStream",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(id)
	if err != nil {
		return tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	_, err = s.Client.Call(request)
	if err != nil {
		return tracerr.Wrap(err)
	}
	return nil
}

// AddEvent - create an event from a server side expression.
//
// Allowed game scenes: any.
func (s *KRPC) AddEvent(expression *Expression) error {
	var err error
	var argBytes []byte
	request := &types.ProcedureCall{
		Procedure: "AddEvent",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(expression)
	if err != nil {
		return tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	_, err = s.Client.Call(request)
	if err != nil {
		return tracerr.Wrap(err)
	}
	return nil
}

// Clients - a list of RPC clients that are currently connected to the server.
// Each entry in the list is a clients identifier, name and address.
//
// Allowed game scenes: any.
func (s *KRPC) Clients() ([]types.Tuple3[[]byte, string, string], error) {
	var err error
	var vv []types.Tuple3[[]byte, string, string]
	request := &types.ProcedureCall{
		Procedure: "get_Clients",
		Service:   "KRPC",
	}
	result, err := s.Client.Call(request)
	if err != nil {
		return vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return vv, tracerr.Wrap(err)
	}
	return vv, nil
}

// ClientsStream - a list of RPC clients that are currently connected to the
// server. Each entry in the list is a clients identifier, name and address.
//
// Allowed game scenes: any.
func (s *KRPC) ClientsStream() (*krpcgo.Stream[[]types.Tuple3[[]byte, string, string]], error) {
	var err error
	request := &types.ProcedureCall{
		Procedure: "get_Clients",
		Service:   "KRPC",
	}
	krpc := New(s.Client)
	st, err := krpc.AddStream(request, true)
	if err != nil {
		return nil, tracerr.Wrap(err)
	}
	rawStream := s.Client.GetStream(st.Id)
	stream := krpcgo.MapStream(rawStream, func(b []byte) []types.Tuple3[[]byte, string, string] {
		var value []types.Tuple3[[]byte, string, string]
		encode.Unmarshal(b, &value)
		return value
	})
	stream.AddCloser(func() error {
		return tracerr.Wrap(krpc.RemoveStream(st.Id))
	})
	return stream, nil
}

// CurrentGameScene - get the current game scene.
//
// Allowed game scenes: any.
func (s *KRPC) CurrentGameScene() (GameScene, error) {
	var err error
	var vv GameScene
	request := &types.ProcedureCall{
		Procedure: "get_CurrentGameScene",
		Service:   "KRPC",
	}
	result, err := s.Client.Call(request)
	if err != nil {
		return vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return vv, tracerr.Wrap(err)
	}
	return vv, nil
}

// CurrentGameSceneStream - get the current game scene.
//
// Allowed game scenes: any.
func (s *KRPC) CurrentGameSceneStream() (*krpcgo.Stream[GameScene], error) {
	var err error
	request := &types.ProcedureCall{
		Procedure: "get_CurrentGameScene",
		Service:   "KRPC",
	}
	krpc := New(s.Client)
	st, err := krpc.AddStream(request, true)
	if err != nil {
		return nil, tracerr.Wrap(err)
	}
	rawStream := s.Client.GetStream(st.Id)
	stream := krpcgo.MapStream(rawStream, func(b []byte) GameScene {
		var value GameScene
		encode.Unmarshal(b, &value)
		return value
	})
	stream.AddCloser(func() error {
		return tracerr.Wrap(krpc.RemoveStream(st.Id))
	})
	return stream, nil
}

// Paused - whether the game is paused.
//
// Allowed game scenes: any.
func (s *KRPC) Paused() (bool, error) {
	var err error
	var vv bool
	request := &types.ProcedureCall{
		Procedure: "get_Paused",
		Service:   "KRPC",
	}
	result, err := s.Client.Call(request)
	if err != nil {
		return vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return vv, tracerr.Wrap(err)
	}
	return vv, nil
}

// PausedStream - whether the game is paused.
//
// Allowed game scenes: any.
func (s *KRPC) PausedStream() (*krpcgo.Stream[bool], error) {
	var err error
	request := &types.ProcedureCall{
		Procedure: "get_Paused",
		Service:   "KRPC",
	}
	krpc := New(s.Client)
	st, err := krpc.AddStream(request, true)
	if err != nil {
		return nil, tracerr.Wrap(err)
	}
	rawStream := s.Client.GetStream(st.Id)
	stream := krpcgo.MapStream(rawStream, func(b []byte) bool {
		var value bool
		encode.Unmarshal(b, &value)
		return value
	})
	stream.AddCloser(func() error {
		return tracerr.Wrap(krpc.RemoveStream(st.Id))
	})
	return stream, nil
}

// SetPaused - whether the game is paused.
//
// Allowed game scenes: any.
func (s *KRPC) SetPaused(value bool) error {
	var err error
	var argBytes []byte
	request := &types.ProcedureCall{
		Procedure: "set_Paused",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(value)
	if err != nil {
		return tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	_, err = s.Client.Call(request)
	if err != nil {
		return tracerr.Wrap(err)
	}
	return nil
}

// ConstantDouble - a constant value of double precision floating point type.
//
// Allowed game scenes: any.
func (s *Expression) ConstantDouble() (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_ConstantDouble",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// ConstantFloat - a constant value of single precision floating point type.
//
// Allowed game scenes: any.
func (s *Expression) ConstantFloat() (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_ConstantFloat",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// ConstantInt - a constant value of integer type.
//
// Allowed game scenes: any.
func (s *Expression) ConstantInt() (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_ConstantInt",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// ConstantBool - a constant value of boolean type.
//
// Allowed game scenes: any.
func (s *Expression) ConstantBool() (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_ConstantBool",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// ConstantString - a constant value of string type.
//
// Allowed game scenes: any.
func (s *Expression) ConstantString() (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_ConstantString",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Call - an RPC call.
//
// Allowed game scenes: any.
func (s *Expression) Call() (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Call",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Equal - equality comparison.
//
// Allowed game scenes: any.
func (s *Expression) Equal(arg1 *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Equal",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(arg1)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// NotEqual - inequality comparison.
//
// Allowed game scenes: any.
func (s *Expression) NotEqual(arg1 *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_NotEqual",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(arg1)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// GreaterThan - greater than numerical comparison.
//
// Allowed game scenes: any.
func (s *Expression) GreaterThan(arg1 *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_GreaterThan",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(arg1)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// GreaterThanOrEqual - greater than or equal numerical comparison.
//
// Allowed game scenes: any.
func (s *Expression) GreaterThanOrEqual(arg1 *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_GreaterThanOrEqual",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(arg1)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// LessThan - less than numerical comparison.
//
// Allowed game scenes: any.
func (s *Expression) LessThan(arg1 *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_LessThan",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(arg1)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// LessThanOrEqual - less than or equal numerical comparison.
//
// Allowed game scenes: any.
func (s *Expression) LessThanOrEqual(arg1 *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_LessThanOrEqual",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(arg1)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// And - boolean and operator.
//
// Allowed game scenes: any.
func (s *Expression) And(arg1 *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_And",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(arg1)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Or - boolean or operator.
//
// Allowed game scenes: any.
func (s *Expression) Or(arg1 *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Or",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(arg1)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// ExclusiveOr - boolean exclusive-or operator.
//
// Allowed game scenes: any.
func (s *Expression) ExclusiveOr(arg1 *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_ExclusiveOr",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(arg1)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Not - boolean negation operator.
//
// Allowed game scenes: any.
func (s *Expression) Not() (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Not",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Add - numerical addition.
//
// Allowed game scenes: any.
func (s *Expression) Add(arg1 *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Add",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(arg1)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Subtract - numerical subtraction.
//
// Allowed game scenes: any.
func (s *Expression) Subtract(arg1 *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Subtract",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(arg1)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Multiply - numerical multiplication.
//
// Allowed game scenes: any.
func (s *Expression) Multiply(arg1 *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Multiply",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(arg1)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Divide - numerical division.
//
// Allowed game scenes: any.
func (s *Expression) Divide(arg1 *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Divide",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(arg1)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Modulo - numerical modulo operator.
//
// Allowed game scenes: any.
func (s *Expression) Modulo(arg1 *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Modulo",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(arg1)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Power - numerical power operator.
//
// Allowed game scenes: any.
func (s *Expression) Power(arg1 *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Power",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(arg1)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// LeftShift - bitwise left shift.
//
// Allowed game scenes: any.
func (s *Expression) LeftShift(arg1 *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_LeftShift",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(arg1)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// RightShift - bitwise right shift.
//
// Allowed game scenes: any.
func (s *Expression) RightShift(arg1 *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_RightShift",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(arg1)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Cast - perform a cast to the given type.
//
// Allowed game scenes: any.
func (s *Expression) Cast(t *Type) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Cast",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(t)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Parameter - a named parameter of type double.
//
// Allowed game scenes: any.
func (s *Expression) Parameter(t *Type) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Parameter",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(t)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Function - a function.
//
// Allowed game scenes: any.
func (s *Expression) Function(body *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Function",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(body)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Invoke - a function call.
//
// Allowed game scenes: any.
func (s *Expression) Invoke(args map[string]*Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Invoke",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(args)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// CreateTuple - construct a tuple.
//
// Allowed game scenes: any.
func (s *Expression) CreateTuple() (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_CreateTuple",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// CreateList - construct a list.
//
// Allowed game scenes: any.
func (s *Expression) CreateList() (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_CreateList",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// CreateSet - construct a set.
//
// Allowed game scenes: any.
func (s *Expression) CreateSet() (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_CreateSet",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// CreateDictionary - construct a dictionary, from a list of corresponding keys
// and values.
//
// Allowed game scenes: any.
func (s *Expression) CreateDictionary(values []*Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_CreateDictionary",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(values)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// ToList - convert a collection to a list.
//
// Allowed game scenes: any.
func (s *Expression) ToList() (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_ToList",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// ToSet - convert a collection to a set.
//
// Allowed game scenes: any.
func (s *Expression) ToSet() (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_ToSet",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Get - access an element in a tuple, list or dictionary.
//
// Allowed game scenes: any.
func (s *Expression) Get(index *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Get",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(index)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Count - number of elements in a collection.
//
// Allowed game scenes: any.
func (s *Expression) Count() (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Count",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Sum - sum all elements of a collection.
//
// Allowed game scenes: any.
func (s *Expression) Sum() (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Sum",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Max - maximum of all elements in a collection.
//
// Allowed game scenes: any.
func (s *Expression) Max() (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Max",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Min - minimum of all elements in a collection.
//
// Allowed game scenes: any.
func (s *Expression) Min() (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Min",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Average - minimum of all elements in a collection.
//
// Allowed game scenes: any.
func (s *Expression) Average() (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Average",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Select - run a function on every element in the collection.
//
// Allowed game scenes: any.
func (s *Expression) Select(f *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Select",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(f)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Where - run a function on every element in the collection.
//
// Allowed game scenes: any.
func (s *Expression) Where(f *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Where",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(f)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Contains - determine if a collection contains a value.
//
// Allowed game scenes: any.
func (s *Expression) Contains(value *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Contains",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(value)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Aggregate - applies an accumulator function over a sequence.
//
// Allowed game scenes: any.
func (s *Expression) Aggregate(f *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Aggregate",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(f)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// AggregateWithSeed - applies an accumulator function over a sequence, with a
// given seed.
//
// Allowed game scenes: any.
func (s *Expression) AggregateWithSeed(seed *Expression, f *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_AggregateWithSeed",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(seed)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(f)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x2),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Concat - concatenate two sequences.
//
// Allowed game scenes: any.
func (s *Expression) Concat(arg2 *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Concat",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(arg2)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// OrderBy - order a collection using a key function.
//
// Allowed game scenes: any.
func (s *Expression) OrderBy(key *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_OrderBy",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(key)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// All - determine whether all items in a collection satisfy a boolean
// predicate.
//
// Allowed game scenes: any.
func (s *Expression) All(predicate *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_All",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(predicate)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Any - determine whether any item in a collection satisfies a boolean
// predicate.
//
// Allowed game scenes: any.
func (s *Expression) Any(predicate *Expression) (*Expression, error) {
	var err error
	var argBytes []byte
	var vv Expression
	request := &types.ProcedureCall{
		Procedure: "Expression_static_Any",
		Service:   "KRPC",
	}
	argBytes, err = encode.Marshal(s)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x0),
		Value:    argBytes,
	})
	argBytes, err = encode.Marshal(predicate)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	request.Arguments = append(request.Arguments, &types.Argument{
		Position: uint32(0x1),
		Value:    argBytes,
	})
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Double - double type.
//
// Allowed game scenes: any.
func (s *Type) Double() (*Type, error) {
	var err error
	var vv Type
	request := &types.ProcedureCall{
		Procedure: "Type_static_Double",
		Service:   "KRPC",
	}
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Float - float type.
//
// Allowed game scenes: any.
func (s *Type) Float() (*Type, error) {
	var err error
	var vv Type
	request := &types.ProcedureCall{
		Procedure: "Type_static_Float",
		Service:   "KRPC",
	}
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Int - int type.
//
// Allowed game scenes: any.
func (s *Type) Int() (*Type, error) {
	var err error
	var vv Type
	request := &types.ProcedureCall{
		Procedure: "Type_static_Int",
		Service:   "KRPC",
	}
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// Bool - bool type.
//
// Allowed game scenes: any.
func (s *Type) Bool() (*Type, error) {
	var err error
	var vv Type
	request := &types.ProcedureCall{
		Procedure: "Type_static_Bool",
		Service:   "KRPC",
	}
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}

// String - string type.
//
// Allowed game scenes: any.
func (s *Type) String() (*Type, error) {
	var err error
	var vv Type
	request := &types.ProcedureCall{
		Procedure: "Type_static_String",
		Service:   "KRPC",
	}
	result, err := s.Client.Call(request)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	err = encode.Unmarshal(result.Value, &vv)
	if err != nil {
		return &vv, tracerr.Wrap(err)
	}
	if vv.ID_internal() == 0 {
		return nil, nil
	}
	vv.Client = s.Client
	return &vv, nil
}
